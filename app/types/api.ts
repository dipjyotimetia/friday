/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/generate': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Generate Tests */
    post: operations['generate_tests_api_v1_generate_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/crawl': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Crawl Site */
    post: operations['crawl_site_api_v1_crawl_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/health': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Health Check */
    get: operations['health_check_api_v1_health_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/testapi': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Test Api
     * @description Run API tests using either a spec file path or uploaded spec file
     */
    post: operations['test_api_api_v1_testapi_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** ApiTestResponse */
    ApiTestResponse: {
      /** Message */
      message: string;
      /** Total Tests */
      total_tests: number;
      /** Paths Tested */
      paths_tested: number;
      /** Passed Tests */
      passed_tests: number;
      /** Failed Tests */
      failed_tests: number;
      /** Error Tests */
      error_tests: number;
      /** Success Rate */
      success_rate: number;
    };
    /** Body_test_api_api_v1_testapi_post */
    Body_test_api_api_v1_testapi_post: {
      /**
       * Base Url
       * @description Base URL for API testing
       */
      base_url: string;
      /**
       * Output
       * @description Output file path
       * @default api_test_report.md
       */
      output: string;
      /**
       * Spec File
       * @description Path to OpenAPI spec file
       */
      spec_file?: string | null;
      /**
       * Spec Upload
       * @description OpenAPI spec file upload
       */
      spec_upload?: string | null;
      /**
       * Provider
       * @description LLM Provider
       * @default openai
       * @enum {string}
       */
      provider: 'gemini' | 'openai' | 'ollama' | 'mistral';
    };
    /** CrawlRequest */
    CrawlRequest: {
      /** Url */
      url: string;
      /**
       * Provider
       * @default openai
       */
      provider: string;
      /**
       * Max Pages
       * @default 10
       */
      max_pages: number;
      /**
       * Same Domain
       * @default true
       */
      same_domain: boolean;
    };
    /** GenerateRequest */
    GenerateRequest: {
      /** Jira Key */
      jira_key?: string | null;
      /** Gh Issue */
      gh_issue?: string | null;
      /** Gh Repo */
      gh_repo?: string | null;
      /** Confluence Id */
      confluence_id?: string | null;
      /**
       * Template
       * @default test_case
       */
      template: string;
      /**
       * Output
       * @default test_cases.md
       */
      output: string;
    };
    /** GenerateResponse */
    GenerateResponse: {
      /** Message */
      message: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][];
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  generate_tests_api_v1_generate_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GenerateRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GenerateResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  crawl_site_api_v1_crawl_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CrawlRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  health_check_api_v1_health_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
    };
  };
  test_api_api_v1_testapi_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_test_api_api_v1_testapi_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ApiTestResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
}
